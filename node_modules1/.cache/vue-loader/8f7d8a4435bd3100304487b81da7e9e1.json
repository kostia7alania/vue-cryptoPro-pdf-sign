{"remainingRequest":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\src\\views\\AppGetCertList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\src\\views\\AppGetCertList.vue","mtime":1555930540116},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555939801121},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1555939801471},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\babel-loader\\lib\\index.js","mtime":1555939794798},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555939801121},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\vue-loader\\lib\\index.js","mtime":1555939801493}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport mySelect from \"../components/my-select.vue\"; \r\n\r\nexport default {\r\n  props: ['img_url'],\r\n  components: { mySelect },\r\n  name: 'App-Get-Cert-List',\r\n  data () {\r\n    return { \r\n      certList: null, \r\n      selected_sert: null,\r\n      cert64: null,\r\n      selected_sert_obj:null\r\n    }\r\n  },\r\n  watch:{\r\n    selected_sert_obj(neww){\r\n      if(!neww) {\r\n        this.selected_sert = null; localStorage.setItem('selected_sert','');\r\n        this.cert64        = null; localStorage.setItem('cert64','');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    if(localStorage.saveState && localStorage.saveState != 'false') {\r\n      this.getArrayLocalStorage('selected_sert_obj'); //чисто для селекта будет вейлью  (для локалсторага)\r\n      this.getArrayLocalStorage('certList');\r\n      if(this.selected_sert_obj){//если не выбран сертификат,то остальное игнорится)!\r\n        this.getArrayLocalStorage('selected_sert');\r\n        this.getParamLocalStorage('cert64');\r\n      }\r\n    }\r\n    \r\n    document.querySelector('.cert-list-rows').style.backgroundImage = `url(${this.img_url}cert.png)`;\r\n\r\n  },\r\n  filters:{\r\n    dateTimeFilter (str) {\r\n      console.log('ДО=>',typeof str); window.e  = new Date(str);\r\n      \r\n      console.log('ПОСЛЕ=>',typeof e); \r\n      return `${e.getDate()}.${e.getMonth()+1}.${e.getFullYear()} ${e.toLocaleTimeString()}`;\r\n    }\r\n  }, \r\n  computed:{\r\n    issuer_comp(){\r\n      let str = this.selected_sert.IssuerName;\r\n\r\n      const regex = /CN=([^,]*)/gmi;\r\n      let m;\r\n\r\n    while ((m = regex.exec(str)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n        }\r\n        return m&&m.length>0?m[1]:' - ';\r\n      }\r\n\r\n\r\n    },\r\n    sert_date_check(){\r\n      this.$nextTick(()=>{\r\n        let s = this.selected_sert;\r\n        if(!s) return false;\r\n        let f1 = +s.ValidFromDate < +new Date();\r\n        let f2 = +new Date() < +s.ValidToDate;\r\n        return !(f1 && f2);\r\n      })\r\n    },\r\n      certList_COMP(){\r\n        return this.certList.map(e=>{\r\n          return {text:e.name, value: e.id}\r\n        })\r\n      },\r\n        IsValid_cert_comp() { \r\n            let s = this.selected_sert; \r\n            return typeof s == 'object' && s.IsValid ? s.IsValid:false;//true = валидно\r\n        }\r\n  },\r\n  methods: {\r\n    upsend_handler(){\r\n\r\n      if(this.IsValid_cert_comp)\r\n        this.$emit ('select-position', {cert64: this.cert64, selected_sert: this.selected_sert })\r\n      else  swal(\"Hello world!\", { className: \"red-bg\", icon: \"error\", text: 'Сертификат недействительный! Выберите действительный сертификат!'});\r\n      \r\n    },\r\n        getCertList(){ // получение списка сертификатов\r\n\r\n        if(!window.cryptopro){\r\n          window.cryptopro = new CryptoPro();\r\n          cryptopro\r\n          .init().then(e => console.warn(\"[Inited] ruscryptojs->\", e))\r\n          .catch(e=>console.log('Ошибка при cryptopro.init()=>',e));\r\n        }\r\n            let that = this;\r\n            that.$emit('loading','Загрузка...');\r\n              cryptopro.listCertificates() //window.CryptoPro.call('getCertsList')\r\n                .then ( list => {\r\n                    console.log('getCertsList',list,this); \r\n                    that.certList = list;\r\n \r\n                    this.saveArrayToLocalStorage('certList', list)//пишем в любом случае в локал стораг!!\r\n\r\n                    that.$emit('loading','');\r\n                    this.goTour();\r\n                    \r\n                }, \r\n                err => {\r\n                    console.log( this, err ); alert( err );\r\n                    that.$emit('loading','');\r\n                });\r\n                \r\n        },\r\n        sertSelectHandler(e) {  console.log('eee====',e);\r\n            let that = this;\r\n            \r\n            this.selected_sert_obj = e;\r\n            this.saveArrayToLocalStorage('selected_sert_obj', e);\r\n\r\n            e = e?e.value:e;\r\n            this.$emit('sel_cert');\r\n            $('.ui-draggable').remove();\r\n             // console.log('e.target.value=>',this.certList[e.target.value].id);\r\n            this.$emit('loading','Загрузка...');\r\n       //   throw ('kk');\r\n            let sertId = e// this.certList[e.target.value].id;\r\n\r\n          cryptopro\r\n          .certificateInfo (sertId)\r\n              .then ( sert => {\r\n                  console.log('certificateInfo=>',sert)\r\n                  that.selected_sert = sert; \r\n\r\n                  this.saveArrayToLocalStorage('selected_sert', sert)//пишем в любом случае в локал стораг!!\r\n\r\n                cryptopro\r\n                .readCertificate(sertId) //this.selected_sert._cert.Export(0)  //getCertBase64 \r\n                  .then ( cert64 => {\r\n                      //cert64 = cert64//.replace(/\\n/gim,'').replace(/\\r/gim,'').replace(' ','').trim(); //вроде бы не треба более! -> и так и так пашет!;\r\n                      console.log('cert64=>', cert64);\r\n                      this.cert64=cert64;\r\n\r\n                      this.saveParamToLocalStorage('cert64', cert64);\r\n\r\n                      that.$emit('loading','');\r\n                      //this.goTour(3);\r\n                  })\r\n                // .then( () => that.$emit('podpisat-confirm',1) )//1-preview,0-final\r\n                .catch ( e => {  that.$emit('loading',''); throw('Ошибка->',e); });\r\n              })\r\n            .catch ( e => {  that.$emit('loading',''); throw('Ошибка->', e); });\r\n        }\r\n      }\r\n}\r\n",{"version":3,"sources":["AppGetCertList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AppGetCertList.vue","sourceRoot":"src/views","sourcesContent":["<template> \r\n    <div class=\"cert_list\">\r\n\r\n      <b-button  v-if=\"certList\" variant=\"light \" @click=\"getCertList\"> <img :src=\"img_url+'update.png'\" alt=\"list-icon\" class=\"list-icon\">\r\n      Обновить список</b-button>\r\n      <button v-if=\"!certList\" \r\n                v-intro=\"step1_update\"\r\n                v-intro-step=\"1\" \r\n                data-step='1'\r\n                v-intro-scroll-to=\"'tooltip'\" \r\n                v-intro-position=\"'bottom-left-aligned'\"\r\n                class=\"btn-3d-1\" \r\n                @click=\"getCertList\">\r\n          <img :src=\"img_url+'list-icon.png'\" alt=\"list-icon\" class=\"list-icon\">Получить список сертификатов</button>\r\n\r\n        <div v-if=\"certList\"> \r\n            <h2>Выберите сертификат:</h2>  \r\n            <!--<select  multiple @click=\"sertSelectHandler()\">\r\n                <option v-for=\"(crt,ind) in certList\" :value=\"ind\" :key=\"ind\">{{crt.name}}</option> \r\n            </select>-->\r\n            <mySelect data-step='2' v-intro=\"step2\" v-intro-step=\"2\" @input=\"sertSelectHandler\" :value=\"selected_sert_obj\" :options=\"certList_COMP\" />\r\n        </div>\r\n\r\n        <div v-if=\"selected_sert\">\r\n           \r\n          <div data-step='3' v-intro=\"step3\" v-intro-step=\"3\" class=\"cert-list-rows\">\r\n            <h2>Информация о сертификате</h2>\r\n              <div>Владелец:    <b>{{selected_sert.Name?selected_sert.Name:''}}</b></div>\r\n              <div>Издатель:    <b>{{issuer_comp}}</b></div>\r\n              \r\n              <div>Выдан: <b>{{selected_sert.ValidFromDate | dateTimeFilter}}</b> </div>\r\n              <div>Действителен до: <b>{{selected_sert.ValidToDate | dateTimeFilter}}</b> </div>\r\n              \r\n\r\n              <div>Статус:   <b>{{selected_sert.IsValid?'Действителен':'Не действителен'}}</b></div>\r\n              <!--\r\n              <div v-if=\"selected_sert.Version==3\">Алгоритм ключа: <b>ГОСТ Р 34.10-2001</b></div> \r\n              <div>Установлен в хранилище:    <b>{{selected_sert.HasPrivateKey?'Да':'Нет'}}</b></div>\r\n              -->\r\n\r\n              <!--<div><b>Имя:</b>  {{selected_sert.Subject.G?selected_sert.Subject.G:'' + \" \" \r\n                                + selected_sert.Subject.SN?selected_sert.Subject.SN:'' \r\n                                + selected_sert.Subject.T?\" (\" + selected_sert.Subject.T + \")\":''}}</div>\r\n              <div><b>Адрес:</b>  {{selected_sert.Subject.STREET?selected_sert.Subject.STREET:''}}</div>-->\r\n               \r\n              <!--<p>Серийный №:    {{selected_sert.SerialNumber}}</p> \"CN=ООО «НОВАГ-СЕРВИС», O=ООО «НОВАГ-СЕРВИС», STREET=\"ул. Комсомольская, д. 40, пом. 12\", L=Краснодар, S=23 Краснодарский край, C=RU, ИНН=002315067718, ОГРН=1022302386028, E=NovAG@tax23.ru\"\r\n              <div>Отпечаток SHA1:    {{selected_sert.Thumbprint}}</div>-->\r\n              <!--\r\n              \r\n              -->\r\n              <div style=\"color:red\" v-if=\"sert_date_check\">Сертификат просрочен</div>\r\n          </div>\r\n          <button data-step='4' v-intro=\"step4\" v-intro-step=\"4\" class=\"btn-3d-1\" :class=\"{disabled: !IsValid_cert_comp}\" @click=\"upsend_handler\">Выбрать положение</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport mySelect from \"../components/my-select.vue\"; \r\n\r\nexport default {\r\n  props: ['img_url'],\r\n  components: { mySelect },\r\n  name: 'App-Get-Cert-List',\r\n  data () {\r\n    return { \r\n      certList: null, \r\n      selected_sert: null,\r\n      cert64: null,\r\n      selected_sert_obj:null\r\n    }\r\n  },\r\n  watch:{\r\n    selected_sert_obj(neww){\r\n      if(!neww) {\r\n        this.selected_sert = null; localStorage.setItem('selected_sert','');\r\n        this.cert64        = null; localStorage.setItem('cert64','');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    if(localStorage.saveState && localStorage.saveState != 'false') {\r\n      this.getArrayLocalStorage('selected_sert_obj'); //чисто для селекта будет вейлью  (для локалсторага)\r\n      this.getArrayLocalStorage('certList');\r\n      if(this.selected_sert_obj){//если не выбран сертификат,то остальное игнорится)!\r\n        this.getArrayLocalStorage('selected_sert');\r\n        this.getParamLocalStorage('cert64');\r\n      }\r\n    }\r\n    \r\n    document.querySelector('.cert-list-rows').style.backgroundImage = `url(${this.img_url}cert.png)`;\r\n\r\n  },\r\n  filters:{\r\n    dateTimeFilter (str) {\r\n      console.log('ДО=>',typeof str); window.e  = new Date(str);\r\n      \r\n      console.log('ПОСЛЕ=>',typeof e); \r\n      return `${e.getDate()}.${e.getMonth()+1}.${e.getFullYear()} ${e.toLocaleTimeString()}`;\r\n    }\r\n  }, \r\n  computed:{\r\n    issuer_comp(){\r\n      let str = this.selected_sert.IssuerName;\r\n\r\n      const regex = /CN=([^,]*)/gmi;\r\n      let m;\r\n\r\n    while ((m = regex.exec(str)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n        }\r\n        return m&&m.length>0?m[1]:' - ';\r\n      }\r\n\r\n\r\n    },\r\n    sert_date_check(){\r\n      this.$nextTick(()=>{\r\n        let s = this.selected_sert;\r\n        if(!s) return false;\r\n        let f1 = +s.ValidFromDate < +new Date();\r\n        let f2 = +new Date() < +s.ValidToDate;\r\n        return !(f1 && f2);\r\n      })\r\n    },\r\n      certList_COMP(){\r\n        return this.certList.map(e=>{\r\n          return {text:e.name, value: e.id}\r\n        })\r\n      },\r\n        IsValid_cert_comp() { \r\n            let s = this.selected_sert; \r\n            return typeof s == 'object' && s.IsValid ? s.IsValid:false;//true = валидно\r\n        }\r\n  },\r\n  methods: {\r\n    upsend_handler(){\r\n\r\n      if(this.IsValid_cert_comp)\r\n        this.$emit ('select-position', {cert64: this.cert64, selected_sert: this.selected_sert })\r\n      else  swal(\"Hello world!\", { className: \"red-bg\", icon: \"error\", text: 'Сертификат недействительный! Выберите действительный сертификат!'});\r\n      \r\n    },\r\n        getCertList(){ // получение списка сертификатов\r\n\r\n        if(!window.cryptopro){\r\n          window.cryptopro = new CryptoPro();\r\n          cryptopro\r\n          .init().then(e => console.warn(\"[Inited] ruscryptojs->\", e))\r\n          .catch(e=>console.log('Ошибка при cryptopro.init()=>',e));\r\n        }\r\n            let that = this;\r\n            that.$emit('loading','Загрузка...');\r\n              cryptopro.listCertificates() //window.CryptoPro.call('getCertsList')\r\n                .then ( list => {\r\n                    console.log('getCertsList',list,this); \r\n                    that.certList = list;\r\n \r\n                    this.saveArrayToLocalStorage('certList', list)//пишем в любом случае в локал стораг!!\r\n\r\n                    that.$emit('loading','');\r\n                    this.goTour();\r\n                    \r\n                }, \r\n                err => {\r\n                    console.log( this, err ); alert( err );\r\n                    that.$emit('loading','');\r\n                });\r\n                \r\n        },\r\n        sertSelectHandler(e) {  console.log('eee====',e);\r\n            let that = this;\r\n            \r\n            this.selected_sert_obj = e;\r\n            this.saveArrayToLocalStorage('selected_sert_obj', e);\r\n\r\n            e = e?e.value:e;\r\n            this.$emit('sel_cert');\r\n            $('.ui-draggable').remove();\r\n             // console.log('e.target.value=>',this.certList[e.target.value].id);\r\n            this.$emit('loading','Загрузка...');\r\n       //   throw ('kk');\r\n            let sertId = e// this.certList[e.target.value].id;\r\n\r\n          cryptopro\r\n          .certificateInfo (sertId)\r\n              .then ( sert => {\r\n                  console.log('certificateInfo=>',sert)\r\n                  that.selected_sert = sert; \r\n\r\n                  this.saveArrayToLocalStorage('selected_sert', sert)//пишем в любом случае в локал стораг!!\r\n\r\n                cryptopro\r\n                .readCertificate(sertId) //this.selected_sert._cert.Export(0)  //getCertBase64 \r\n                  .then ( cert64 => {\r\n                      //cert64 = cert64//.replace(/\\n/gim,'').replace(/\\r/gim,'').replace(' ','').trim(); //вроде бы не треба более! -> и так и так пашет!;\r\n                      console.log('cert64=>', cert64);\r\n                      this.cert64=cert64;\r\n\r\n                      this.saveParamToLocalStorage('cert64', cert64);\r\n\r\n                      that.$emit('loading','');\r\n                      //this.goTour(3);\r\n                  })\r\n                // .then( () => that.$emit('podpisat-confirm',1) )//1-preview,0-final\r\n                .catch ( e => {  that.$emit('loading',''); throw('Ошибка->',e); });\r\n              })\r\n            .catch ( e => {  that.$emit('loading',''); throw('Ошибка->', e); });\r\n        }\r\n      }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n/*select { flex:10;}*/\r\n\r\n.cert_list { \r\n  text-align: center;\r\n  \r\n    flex: 10;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n  .cert-list-rows {\r\n    h2{ text-align: center; width: 100%; }\r\n   /* background-image: url(../img/cert.png);*//*<=ПЕРЕНЕС В MOUNTED (в продакшене чеб мог менять урл картинок!)*/\r\n    border:5px double #5a9251; \r\n    padding: 10px;\r\n    margin: 15px 0px 22px 0px;\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    padding: 10px 50px;\r\n    &>div { \r\n      align-self: flex-start !important;\r\n      text-align: left;\r\n      padding-top: 5px; \r\n    }\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n\r\n\r\n<style lang=\"scss\">  \r\n.list-icon{\r\n  width: 20px;\r\n  vertical-align: middle;\r\n}\r\n</style>\r\n"]}]}
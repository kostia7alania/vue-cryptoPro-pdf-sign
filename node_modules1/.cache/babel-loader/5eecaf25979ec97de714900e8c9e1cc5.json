{"remainingRequest":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\thread-loader\\dist\\cjs.js!C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\babel-loader\\lib\\index.js!C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\src\\views\\AppGetCertList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\src\\views\\AppGetCertList.vue","mtime":1555930540116},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555939801121},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1555939801471},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\babel-loader\\lib\\index.js","mtime":1555939794798},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555939801121},{"path":"C:\\inetpub\\wwwroot\\Shipregs2_tst3_k\\js\\vue-cryptoPro-pdf-sign\\node_modules\\vue-loader\\lib\\index.js","mtime":1555939801493}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _mySelect = _interopRequireDefault(require(\"../components/my-select.vue\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar _default = {\n  props: ['img_url'],\n  components: {\n    mySelect: _mySelect.default\n  },\n  name: 'App-Get-Cert-List',\n  data: function data() {\n    return {\n      certList: null,\n      selected_sert: null,\n      cert64: null,\n      selected_sert_obj: null\n    };\n  },\n  watch: {\n    selected_sert_obj: function selected_sert_obj(neww) {\n      if (!neww) {\n        this.selected_sert = null;\n        localStorage.setItem('selected_sert', '');\n        this.cert64 = null;\n        localStorage.setItem('cert64', '');\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (localStorage.saveState && localStorage.saveState != 'false') {\n      this.getArrayLocalStorage('selected_sert_obj'); //чисто для селекта будет вейлью  (для локалсторага)\n\n      this.getArrayLocalStorage('certList');\n\n      if (this.selected_sert_obj) {\n        //если не выбран сертификат,то остальное игнорится)!\n        this.getArrayLocalStorage('selected_sert');\n        this.getParamLocalStorage('cert64');\n      }\n    }\n\n    document.querySelector('.cert-list-rows').style.backgroundImage = \"url(\".concat(this.img_url, \"cert.png)\");\n  },\n  filters: {\n    dateTimeFilter: function dateTimeFilter(str) {\n      console.log('ДО=>', _typeof(str));\n      window.e = new Date(str);\n      console.log('ПОСЛЕ=>', typeof e === \"undefined\" ? \"undefined\" : _typeof(e));\n      return \"\".concat(e.getDate(), \".\").concat(e.getMonth() + 1, \".\").concat(e.getFullYear(), \" \").concat(e.toLocaleTimeString());\n    }\n  },\n  computed: {\n    issuer_comp: function issuer_comp() {\n      var str = this.selected_sert.IssuerName;\n      var regex = /CN=([^,]*)/gmi;\n      var m;\n\n      while ((m = regex.exec(str)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        return m && m.length > 0 ? m[1] : ' - ';\n      }\n    },\n    sert_date_check: function sert_date_check() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var s = _this.selected_sert;\n        if (!s) return false;\n        var f1 = +s.ValidFromDate < +new Date();\n        var f2 = +new Date() < +s.ValidToDate;\n        return !(f1 && f2);\n      });\n    },\n    certList_COMP: function certList_COMP() {\n      return this.certList.map(function (e) {\n        return {\n          text: e.name,\n          value: e.id\n        };\n      });\n    },\n    IsValid_cert_comp: function IsValid_cert_comp() {\n      var s = this.selected_sert;\n      return _typeof(s) == 'object' && s.IsValid ? s.IsValid : false; //true = валидно\n    }\n  },\n  methods: {\n    upsend_handler: function upsend_handler() {\n      if (this.IsValid_cert_comp) this.$emit('select-position', {\n        cert64: this.cert64,\n        selected_sert: this.selected_sert\n      });else swal(\"Hello world!\", {\n        className: \"red-bg\",\n        icon: \"error\",\n        text: 'Сертификат недействительный! Выберите действительный сертификат!'\n      });\n    },\n    getCertList: function getCertList() {\n      var _this2 = this;\n\n      // получение списка сертификатов\n      if (!window.cryptopro) {\n        window.cryptopro = new CryptoPro();\n        cryptopro.init().then(function (e) {\n          return console.warn(\"[Inited] ruscryptojs->\", e);\n        }).catch(function (e) {\n          return console.log('Ошибка при cryptopro.init()=>', e);\n        });\n      }\n\n      var that = this;\n      that.$emit('loading', 'Загрузка...');\n      cryptopro.listCertificates() //window.CryptoPro.call('getCertsList')\n      .then(function (list) {\n        console.log('getCertsList', list, _this2);\n        that.certList = list;\n\n        _this2.saveArrayToLocalStorage('certList', list); //пишем в любом случае в локал стораг!!\n\n\n        that.$emit('loading', '');\n\n        _this2.goTour();\n      }, function (err) {\n        console.log(_this2, err);\n        alert(err);\n        that.$emit('loading', '');\n      });\n    },\n    sertSelectHandler: function sertSelectHandler(e) {\n      var _this3 = this;\n\n      console.log('eee====', e);\n      var that = this;\n      this.selected_sert_obj = e;\n      this.saveArrayToLocalStorage('selected_sert_obj', e);\n      e = e ? e.value : e;\n      this.$emit('sel_cert');\n      $('.ui-draggable').remove(); // console.log('e.target.value=>',this.certList[e.target.value].id);\n\n      this.$emit('loading', 'Загрузка...'); //   throw ('kk');\n\n      var sertId = e; // this.certList[e.target.value].id;\n\n      cryptopro.certificateInfo(sertId).then(function (sert) {\n        console.log('certificateInfo=>', sert);\n        that.selected_sert = sert;\n\n        _this3.saveArrayToLocalStorage('selected_sert', sert); //пишем в любом случае в локал стораг!!\n\n\n        cryptopro.readCertificate(sertId) //this.selected_sert._cert.Export(0)  //getCertBase64 \n        .then(function (cert64) {\n          //cert64 = cert64//.replace(/\\n/gim,'').replace(/\\r/gim,'').replace(' ','').trim(); //вроде бы не треба более! -> и так и так пашет!;\n          console.log('cert64=>', cert64);\n          _this3.cert64 = cert64;\n\n          _this3.saveParamToLocalStorage('cert64', cert64);\n\n          that.$emit('loading', ''); //this.goTour(3);\n        }) // .then( () => that.$emit('podpisat-confirm',1) )//1-preview,0-final\n        .catch(function (e) {\n          that.$emit('loading', '');\n          throw 'Ошибка->', e;\n        });\n      }).catch(function (e) {\n        that.$emit('loading', '');\n        throw 'Ошибка->', e;\n      });\n    }\n  }\n};\nexports.default = _default;",{"version":3,"sources":["AppGetCertList.vue"],"names":[],"mappings":"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","sourcesContent":["<template> \r\n    <div class=\"cert_list\">\r\n\r\n      <b-button  v-if=\"certList\" variant=\"light \" @click=\"getCertList\"> <img :src=\"img_url+'update.png'\" alt=\"list-icon\" class=\"list-icon\">\r\n      Обновить список</b-button>\r\n      <button v-if=\"!certList\" \r\n                v-intro=\"step1_update\"\r\n                v-intro-step=\"1\" \r\n                data-step='1'\r\n                v-intro-scroll-to=\"'tooltip'\" \r\n                v-intro-position=\"'bottom-left-aligned'\"\r\n                class=\"btn-3d-1\" \r\n                @click=\"getCertList\">\r\n          <img :src=\"img_url+'list-icon.png'\" alt=\"list-icon\" class=\"list-icon\">Получить список сертификатов</button>\r\n\r\n        <div v-if=\"certList\"> \r\n            <h2>Выберите сертификат:</h2>  \r\n            <!--<select  multiple @click=\"sertSelectHandler()\">\r\n                <option v-for=\"(crt,ind) in certList\" :value=\"ind\" :key=\"ind\">{{crt.name}}</option> \r\n            </select>-->\r\n            <mySelect data-step='2' v-intro=\"step2\" v-intro-step=\"2\" @input=\"sertSelectHandler\" :value=\"selected_sert_obj\" :options=\"certList_COMP\" />\r\n        </div>\r\n\r\n        <div v-if=\"selected_sert\">\r\n           \r\n          <div data-step='3' v-intro=\"step3\" v-intro-step=\"3\" class=\"cert-list-rows\">\r\n            <h2>Информация о сертификате</h2>\r\n              <div>Владелец:    <b>{{selected_sert.Name?selected_sert.Name:''}}</b></div>\r\n              <div>Издатель:    <b>{{issuer_comp}}</b></div>\r\n              \r\n              <div>Выдан: <b>{{selected_sert.ValidFromDate | dateTimeFilter}}</b> </div>\r\n              <div>Действителен до: <b>{{selected_sert.ValidToDate | dateTimeFilter}}</b> </div>\r\n              \r\n\r\n              <div>Статус:   <b>{{selected_sert.IsValid?'Действителен':'Не действителен'}}</b></div>\r\n              <!--\r\n              <div v-if=\"selected_sert.Version==3\">Алгоритм ключа: <b>ГОСТ Р 34.10-2001</b></div> \r\n              <div>Установлен в хранилище:    <b>{{selected_sert.HasPrivateKey?'Да':'Нет'}}</b></div>\r\n              -->\r\n\r\n              <!--<div><b>Имя:</b>  {{selected_sert.Subject.G?selected_sert.Subject.G:'' + \" \" \r\n                                + selected_sert.Subject.SN?selected_sert.Subject.SN:'' \r\n                                + selected_sert.Subject.T?\" (\" + selected_sert.Subject.T + \")\":''}}</div>\r\n              <div><b>Адрес:</b>  {{selected_sert.Subject.STREET?selected_sert.Subject.STREET:''}}</div>-->\r\n               \r\n              <!--<p>Серийный №:    {{selected_sert.SerialNumber}}</p> \"CN=ООО «НОВАГ-СЕРВИС», O=ООО «НОВАГ-СЕРВИС», STREET=\"ул. Комсомольская, д. 40, пом. 12\", L=Краснодар, S=23 Краснодарский край, C=RU, ИНН=002315067718, ОГРН=1022302386028, E=NovAG@tax23.ru\"\r\n              <div>Отпечаток SHA1:    {{selected_sert.Thumbprint}}</div>-->\r\n              <!--\r\n              \r\n              -->\r\n              <div style=\"color:red\" v-if=\"sert_date_check\">Сертификат просрочен</div>\r\n          </div>\r\n          <button data-step='4' v-intro=\"step4\" v-intro-step=\"4\" class=\"btn-3d-1\" :class=\"{disabled: !IsValid_cert_comp}\" @click=\"upsend_handler\">Выбрать положение</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport mySelect from \"../components/my-select.vue\"; \r\n\r\nexport default {\r\n  props: ['img_url'],\r\n  components: { mySelect },\r\n  name: 'App-Get-Cert-List',\r\n  data () {\r\n    return { \r\n      certList: null, \r\n      selected_sert: null,\r\n      cert64: null,\r\n      selected_sert_obj:null\r\n    }\r\n  },\r\n  watch:{\r\n    selected_sert_obj(neww){\r\n      if(!neww) {\r\n        this.selected_sert = null; localStorage.setItem('selected_sert','');\r\n        this.cert64        = null; localStorage.setItem('cert64','');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    if(localStorage.saveState && localStorage.saveState != 'false') {\r\n      this.getArrayLocalStorage('selected_sert_obj'); //чисто для селекта будет вейлью  (для локалсторага)\r\n      this.getArrayLocalStorage('certList');\r\n      if(this.selected_sert_obj){//если не выбран сертификат,то остальное игнорится)!\r\n        this.getArrayLocalStorage('selected_sert');\r\n        this.getParamLocalStorage('cert64');\r\n      }\r\n    }\r\n    \r\n    document.querySelector('.cert-list-rows').style.backgroundImage = `url(${this.img_url}cert.png)`;\r\n\r\n  },\r\n  filters:{\r\n    dateTimeFilter (str) {\r\n      console.log('ДО=>',typeof str); window.e  = new Date(str);\r\n      \r\n      console.log('ПОСЛЕ=>',typeof e); \r\n      return `${e.getDate()}.${e.getMonth()+1}.${e.getFullYear()} ${e.toLocaleTimeString()}`;\r\n    }\r\n  }, \r\n  computed:{\r\n    issuer_comp(){\r\n      let str = this.selected_sert.IssuerName;\r\n\r\n      const regex = /CN=([^,]*)/gmi;\r\n      let m;\r\n\r\n    while ((m = regex.exec(str)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n        }\r\n        return m&&m.length>0?m[1]:' - ';\r\n      }\r\n\r\n\r\n    },\r\n    sert_date_check(){\r\n      this.$nextTick(()=>{\r\n        let s = this.selected_sert;\r\n        if(!s) return false;\r\n        let f1 = +s.ValidFromDate < +new Date();\r\n        let f2 = +new Date() < +s.ValidToDate;\r\n        return !(f1 && f2);\r\n      })\r\n    },\r\n      certList_COMP(){\r\n        return this.certList.map(e=>{\r\n          return {text:e.name, value: e.id}\r\n        })\r\n      },\r\n        IsValid_cert_comp() { \r\n            let s = this.selected_sert; \r\n            return typeof s == 'object' && s.IsValid ? s.IsValid:false;//true = валидно\r\n        }\r\n  },\r\n  methods: {\r\n    upsend_handler(){\r\n\r\n      if(this.IsValid_cert_comp)\r\n        this.$emit ('select-position', {cert64: this.cert64, selected_sert: this.selected_sert })\r\n      else  swal(\"Hello world!\", { className: \"red-bg\", icon: \"error\", text: 'Сертификат недействительный! Выберите действительный сертификат!'});\r\n      \r\n    },\r\n        getCertList(){ // получение списка сертификатов\r\n\r\n        if(!window.cryptopro){\r\n          window.cryptopro = new CryptoPro();\r\n          cryptopro\r\n          .init().then(e => console.warn(\"[Inited] ruscryptojs->\", e))\r\n          .catch(e=>console.log('Ошибка при cryptopro.init()=>',e));\r\n        }\r\n            let that = this;\r\n            that.$emit('loading','Загрузка...');\r\n              cryptopro.listCertificates() //window.CryptoPro.call('getCertsList')\r\n                .then ( list => {\r\n                    console.log('getCertsList',list,this); \r\n                    that.certList = list;\r\n \r\n                    this.saveArrayToLocalStorage('certList', list)//пишем в любом случае в локал стораг!!\r\n\r\n                    that.$emit('loading','');\r\n                    this.goTour();\r\n                    \r\n                }, \r\n                err => {\r\n                    console.log( this, err ); alert( err );\r\n                    that.$emit('loading','');\r\n                });\r\n                \r\n        },\r\n        sertSelectHandler(e) {  console.log('eee====',e);\r\n            let that = this;\r\n            \r\n            this.selected_sert_obj = e;\r\n            this.saveArrayToLocalStorage('selected_sert_obj', e);\r\n\r\n            e = e?e.value:e;\r\n            this.$emit('sel_cert');\r\n            $('.ui-draggable').remove();\r\n             // console.log('e.target.value=>',this.certList[e.target.value].id);\r\n            this.$emit('loading','Загрузка...');\r\n       //   throw ('kk');\r\n            let sertId = e// this.certList[e.target.value].id;\r\n\r\n          cryptopro\r\n          .certificateInfo (sertId)\r\n              .then ( sert => {\r\n                  console.log('certificateInfo=>',sert)\r\n                  that.selected_sert = sert; \r\n\r\n                  this.saveArrayToLocalStorage('selected_sert', sert)//пишем в любом случае в локал стораг!!\r\n\r\n                cryptopro\r\n                .readCertificate(sertId) //this.selected_sert._cert.Export(0)  //getCertBase64 \r\n                  .then ( cert64 => {\r\n                      //cert64 = cert64//.replace(/\\n/gim,'').replace(/\\r/gim,'').replace(' ','').trim(); //вроде бы не треба более! -> и так и так пашет!;\r\n                      console.log('cert64=>', cert64);\r\n                      this.cert64=cert64;\r\n\r\n                      this.saveParamToLocalStorage('cert64', cert64);\r\n\r\n                      that.$emit('loading','');\r\n                      //this.goTour(3);\r\n                  })\r\n                // .then( () => that.$emit('podpisat-confirm',1) )//1-preview,0-final\r\n                .catch ( e => {  that.$emit('loading',''); throw('Ошибка->',e); });\r\n              })\r\n            .catch ( e => {  that.$emit('loading',''); throw('Ошибка->', e); });\r\n        }\r\n      }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n/*select { flex:10;}*/\r\n\r\n.cert_list { \r\n  text-align: center;\r\n  \r\n    flex: 10;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n  .cert-list-rows {\r\n    h2{ text-align: center; width: 100%; }\r\n   /* background-image: url(../img/cert.png);*//*<=ПЕРЕНЕС В MOUNTED (в продакшене чеб мог менять урл картинок!)*/\r\n    border:5px double #5a9251; \r\n    padding: 10px;\r\n    margin: 15px 0px 22px 0px;\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    padding: 10px 50px;\r\n    &>div { \r\n      align-self: flex-start !important;\r\n      text-align: left;\r\n      padding-top: 5px; \r\n    }\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n\r\n\r\n<style lang=\"scss\">  \r\n.list-icon{\r\n  width: 20px;\r\n  vertical-align: middle;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views"}]}